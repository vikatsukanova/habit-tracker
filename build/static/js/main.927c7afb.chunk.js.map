{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","display","alignItems","newHabitField","flex","marginRight","newHabitSubmitButton","App","props","classes","useState","habits","setData","newHabit","setNewHabit","useEffect","a","fetch","result","json","data","fetchData","handleButtonSubmit","event","name","completed","method","headers","body","JSON","stringify","response","newHabitResult","concat","handleButtonComplete","id","console","log","handleButtonDelete","_id","filter","habit","Fragment","AppBar","position","Toolbar","Typography","variant","Container","className","TextField","fullWidth","required","label","onChange","input","target","value","margin","Button","onClick","Card","List","component","aria-label","map","ListItem","divider","button","key","ListItemText","primary","color","IconButton","edge","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.927c7afb.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport TextField from '@material-ui/core/TextField';\nimport Container from '@material-ui/core/Container';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport IconButton from '@material-ui/core/IconButton';\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'flex',\n    alignItems: 'baseline',\n  },\n  newHabitField: {\n    flex: 4,\n    marginRight: 5\n  },\n  newHabitSubmitButton: {\n    flex: 1\n  }\n});\n\nfunction App(props) {\n  const classes = useStyles();\n\n  const [habits, setData] = useState([]);\n  const [newHabit, setNewHabit] = useState('')\n\n  useEffect(() => {\n    const fetchData = async() => {\n      const result = await fetch('/api/books')\n      const habits = await result.json()\n      setData(habits.data);\n    };\n    fetchData();\n  }, []);\n\n  const handleHabitChange = (event) => {\n    const input = event.target.value\n    setNewHabit(input)\n  }\n\n  const handleButtonSubmit = async (event) => {\n    const data = {\n      name: newHabit,\n      completed: false,\n    }\n\n    const response = await fetch('/api/books', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    })\n\n    const newHabitResult = await response.json()\n    setData(habits.concat(newHabitResult.data))\n    setNewHabit('')\n  }\n\n  const handleButtonComplete = async (id) => {\n    console.log({id})\n\n  }\n\n  const handleButtonDelete = async (id) => {\n    console.log(id);\n\n    const data = {\n      _id: id\n    }\n\n    const response = await fetch('/api/books/', {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    })\n\n    setData(habits.filter(habit => habit._id !== id));\n\n  }\n\n    return (\n      <React.Fragment>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <Typography variant=\"h5\">SmartHabit</Typography>\n          </Toolbar>\n        </AppBar>\n        <Container>\n          <div className={classes.root}>\n            <TextField\n              className={classes.newHabitField}\n              fullWidth\n              required\n              id=\"filled-required\"\n              label=\"New Habit\"\n              onChange={handleHabitChange}\n              margin=\"normal\"\n              value={newHabit}\n            />\n            <Button\n              className={classes.newHabitSubmitButton}\n              fullWidth\n              variant=\"outlined\"\n              onClick={handleButtonSubmit}\n            >\n              Add a Habit\n            </Button>\n          </div>\n          <Card>\n            <List component=\"nav\" aria-label=\"secondary mailbox folders\">\n              {habits.map(habit => {\n                const { _id: id, name, completed } = habit;\n                return (\n                  <ListItem divider button key={id}>\n                    <ListItemText primary={name} />\n                    <Button\n                        variant=\"outlined\"\n                        onClick={() => handleButtonComplete(id)}\n                        color={completed ? \"primary\" : \"default\"}\n                      >\n                        {completed ? \"Completed\" : \"Mark Complete\"}\n                      </Button>\n                    <IconButton\n                      edge=\"end\"\n                      aria-label=\"delete\"\n                      onClick={() => handleButtonDelete(id)}\n                    >\n                      <DeleteIcon />\n                    </IconButton>\n                  </ListItem>\n                )\n              })}\n            </List>\n          </Card>\n        </Container>\n      </React.Fragment>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\n/* global fetch */\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}